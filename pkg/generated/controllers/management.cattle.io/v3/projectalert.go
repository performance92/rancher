/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ProjectAlertController interface for managing ProjectAlert resources.
type ProjectAlertController interface {
	generic.ControllerInterface[*v3.ProjectAlert, *v3.ProjectAlertList]
}

// ProjectAlertClient interface for managing ProjectAlert resources in Kubernetes.
type ProjectAlertClient interface {
	generic.ClientInterface[*v3.ProjectAlert, *v3.ProjectAlertList]
}

// ProjectAlertCache interface for retrieving ProjectAlert resources in memory.
type ProjectAlertCache interface {
	generic.CacheInterface[*v3.ProjectAlert]
}

type ProjectAlertStatusHandler func(obj *v3.ProjectAlert, status v3.AlertStatus) (v3.AlertStatus, error)

type ProjectAlertGeneratingHandler func(obj *v3.ProjectAlert, status v3.AlertStatus) ([]runtime.Object, v3.AlertStatus, error)

func RegisterProjectAlertStatusHandler(ctx context.Context, controller ProjectAlertController, condition condition.Cond, name string, handler ProjectAlertStatusHandler) {
	statusHandler := &projectAlertStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterProjectAlertGeneratingHandler(ctx context.Context, controller ProjectAlertController, apply apply.Apply,
	condition condition.Cond, name string, handler ProjectAlertGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &projectAlertGeneratingHandler{
		ProjectAlertGeneratingHandler: handler,
		apply:                         apply,
		name:                          name,
		gvk:                           controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterProjectAlertStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type projectAlertStatusHandler struct {
	client    ProjectAlertClient
	condition condition.Cond
	handler   ProjectAlertStatusHandler
}

func (a *projectAlertStatusHandler) sync(key string, obj *v3.ProjectAlert) (*v3.ProjectAlert, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type projectAlertGeneratingHandler struct {
	ProjectAlertGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *projectAlertGeneratingHandler) Remove(key string, obj *v3.ProjectAlert) (*v3.ProjectAlert, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.ProjectAlert{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *projectAlertGeneratingHandler) Handle(obj *v3.ProjectAlert, status v3.AlertStatus) (v3.AlertStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ProjectAlertGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
