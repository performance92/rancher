/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rancher/pkg/apis/rke.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// RKEClusterController interface for managing RKECluster resources.
type RKEClusterController interface {
	generic.ControllerInterface[*v1.RKECluster, *v1.RKEClusterList]
}

// RKEClusterClient interface for managing RKECluster resources in Kubernetes.
type RKEClusterClient interface {
	generic.ClientInterface[*v1.RKECluster, *v1.RKEClusterList]
}

// RKEClusterCache interface for retrieving RKECluster resources in memory.
type RKEClusterCache interface {
	generic.CacheInterface[*v1.RKECluster]
}

type RKEClusterStatusHandler func(obj *v1.RKECluster, status v1.RKEClusterStatus) (v1.RKEClusterStatus, error)

type RKEClusterGeneratingHandler func(obj *v1.RKECluster, status v1.RKEClusterStatus) ([]runtime.Object, v1.RKEClusterStatus, error)

func RegisterRKEClusterStatusHandler(ctx context.Context, controller RKEClusterController, condition condition.Cond, name string, handler RKEClusterStatusHandler) {
	statusHandler := &rKEClusterStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterRKEClusterGeneratingHandler(ctx context.Context, controller RKEClusterController, apply apply.Apply,
	condition condition.Cond, name string, handler RKEClusterGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &rKEClusterGeneratingHandler{
		RKEClusterGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterRKEClusterStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type rKEClusterStatusHandler struct {
	client    RKEClusterClient
	condition condition.Cond
	handler   RKEClusterStatusHandler
}

func (a *rKEClusterStatusHandler) sync(key string, obj *v1.RKECluster) (*v1.RKECluster, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type rKEClusterGeneratingHandler struct {
	RKEClusterGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *rKEClusterGeneratingHandler) Remove(key string, obj *v1.RKECluster) (*v1.RKECluster, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.RKECluster{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *rKEClusterGeneratingHandler) Handle(obj *v1.RKECluster, status v1.RKEClusterStatus) (v1.RKEClusterStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.RKEClusterGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
