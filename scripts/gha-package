#!/bin/bash
set -e

source $(dirname $0)/version
source $(dirname $0)/export-config
source $(dirname $0)/package-env

cd $(dirname $0)/../package

../scripts/k3s-images.sh

cp ../bin/rancher ../bin/agent ../bin/data.json ../bin/k3s-airgap-images.tar .

# Make sure the used data.json is a release artifact
cp ../bin/data.json ../bin/rancher-data.json

if [ ${ARCH} == arm64 ]; then
    ETCD_UNSUPPORTED_ARCH=arm64
fi
if [ ${ARCH} == s390x ]; then
    ETCD_UNSUPPORTED_ARCH=s390x
fi

docker build \
    --build-arg VERSION=${TAG} \
    --build-arg ETCD_UNSUPPORTED_ARCH=${ETCD_UNSUPPORTED_ARCH} \
    --build-arg ARCH=${ARCH} \
    --build-arg IMAGE_REPO=${REPO} \
    --build-arg SYSTEM_CHART_DEFAULT_BRANCH=${SYSTEM_CHART_DEFAULT_BRANCH} \
    --build-arg CHART_DEFAULT_BRANCH=${CHART_DEFAULT_BRANCH} \
    --build-arg CATTLE_RANCHER_WEBHOOK_VERSION="${CATTLE_RANCHER_WEBHOOK_VERSION}" \
    --build-arg CATTLE_RANCHER_PROVISIONING_CAPI_VERSION="${CATTLE_RANCHER_PROVISIONING_CAPI_VERSION}" \
    --build-arg CATTLE_CSP_ADAPTER_MIN_VERSION="${CATTLE_CSP_ADAPTER_MIN_VERSION}" \
    --build-arg CATTLE_FLEET_VERSION="${CATTLE_FLEET_VERSION}" \
    -t ${IMAGE} .

docker build \
    --build-arg VERSION=${TAG} \
    --build-arg ARCH=${ARCH} \
    --build-arg RANCHER_TAG=${TAG} \
    --build-arg CATTLE_RANCHER_WEBHOOK_VERSION="${CATTLE_RANCHER_WEBHOOK_VERSION}" \
    --build-arg CATTLE_RANCHER_PROVISIONING_CAPI_VERSION="${CATTLE_RANCHER_PROVISIONING_CAPI_VERSION}" \
    --build-arg RANCHER_REPO=${REPO} \
    -t ${AGENT_IMAGE} -f Dockerfile.agent .
